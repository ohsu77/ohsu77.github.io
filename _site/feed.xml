

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Ohsu's Notebook</title>
  <subtitle>Do this all day.</subtitle>
  <updated>2024-08-01T23:27:19-04:00</updated>
  <author>
    <name>Ohsu Kwon</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Ohsu Kwon </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>2302. Count Subarrays With Score Less Than K</title>
    <link href="http://localhost:4000/posts/2302.-count-subarrays-with-score-less-than-k/" rel="alternate" type="text/html" title="2302. Count Subarrays With Score Less Than K" />
    <published>2024-08-01T12:40:29-04:00</published>
  
    <updated>2024-08-01T12:40:29-04:00</updated>
  
    <id>http://localhost:4000/posts/2302.-count-subarrays-with-score-less-than-k/</id>
    <content src="http://localhost:4000/posts/2302.-count-subarrays-with-score-less-than-k/" />
    <author>
      <name>Ohsu Kwon</name>
    </author>

  
    
    <category term="programming" />
    
    <category term="leetcode" />
    
  

  <summary>url: https://leetcode.com/problems/count-subarrays-with-score-less-than-k/description/


  Input:  nums = [2,1,4,3,5], k = 10  
Output: 6 
Explanation: 
The 6 subarrays having scores less than 10 are:
  
    [2] with score 2 * 1 = 2.
    [1] with score 1 * 1 = 1.
    [4] with score 4 * 1 = 4.
    [3] with score 3 * 1 = 3.
    [5] with score 5 * 1 = 5.
    [2,1] with score (2 + 1) * 2 = 6. 
💡 No...</summary>

  </entry>

  
  <entry>
    <title>146. LRU Cache</title>
    <link href="http://localhost:4000/posts/146.-lru-cache/" rel="alternate" type="text/html" title="146. LRU Cache" />
    <published>2024-08-01T12:02:42-04:00</published>
  
    <updated>2024-08-01T12:02:42-04:00</updated>
  
    <id>http://localhost:4000/posts/146.-lru-cache/</id>
    <content src="http://localhost:4000/posts/146.-lru-cache/" />
    <author>
      <name>Ohsu Kwon</name>
    </author>

  
    
    <category term="programming" />
    
    <category term="leetcode" />
    
  

  <summary>url:https://leetcode.com/problems/lru-cache/description/

Example




  Input:  [“LRUCache”, “put”, “put”, “get”, “put”, “get”, “put”, “get”, “get”, “get”]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]  Output:  [null, null, null, 1, null, -1, null, -1, 3, 4]


💻 Code

Approach :

  Doubly Linked List helps organizing the order for cache (recently used cache)
    
      keep up...</summary>

  </entry>

  
  <entry>
    <title>105. Construct Binary Tree from Preorder and Inorder Traversal</title>
    <link href="http://localhost:4000/posts/105.-construct-binary-tree-from-preorder-and-inorder-traversal/" rel="alternate" type="text/html" title="105. Construct Binary Tree from Preorder and Inorder Traversal" />
    <published>2024-07-31T14:19:24-04:00</published>
  
    <updated>2024-08-01T12:39:07-04:00</updated>
  
    <id>http://localhost:4000/posts/105.-construct-binary-tree-from-preorder-and-inorder-traversal/</id>
    <content src="http://localhost:4000/posts/105.-construct-binary-tree-from-preorder-and-inorder-traversal/" />
    <author>
      <name>Ohsu Kwon</name>
    </author>

  
    
    <category term="programming" />
    
    <category term="leetcode" />
    
  

  <summary>url:https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/

Example




    Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7] Output: [3,9,20,null,null,15,7]


💻 Code

Approach :
          root
preorder = [3,  9,  20,  15,  7]

inorder  = [9,  3,  15,  20,  7]
            |       |_________|
           left        right


  preorder: increasi...</summary>

  </entry>

  
  <entry>
    <title>347. Top K Frequent Elements</title>
    <link href="http://localhost:4000/posts/347.-top-k-frequent-elements/" rel="alternate" type="text/html" title="347. Top K Frequent Elements" />
    <published>2024-07-30T21:08:48-04:00</published>
  
    <updated>2024-08-01T11:59:56-04:00</updated>
  
    <id>http://localhost:4000/posts/347.-top-k-frequent-elements/</id>
    <content src="http://localhost:4000/posts/347.-top-k-frequent-elements/" />
    <author>
      <name>Ohsu Kwon</name>
    </author>

  
    
    <category term="programming" />
    
    <category term="leetcode" />
    
  

  <summary>url:https://leetcode.com/problems/top-k-frequent-elements/description/

Example



  Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]


💻 Code
Approach : Count each number using hash, then prioritize for k number of elements.

1. Brute force



  Hash Map &amp;amp;amp; Priority Queue
  TC : O(n log n)
    
      n : hash map
      log m : heap
    
  
  SC: O(n)


class Solution:
    def topKFrequent(s...</summary>

  </entry>

  
  <entry>
    <title>8. String to Integer (atoi)</title>
    <link href="http://localhost:4000/posts/8.-string-to-integer-(atoi)/" rel="alternate" type="text/html" title="8. String to Integer (atoi)" />
    <published>2024-07-30T20:23:22-04:00</published>
  
    <updated>2024-08-01T11:59:56-04:00</updated>
  
    <id>http://localhost:4000/posts/8.-string-to-integer-(atoi)/</id>
    <content src="http://localhost:4000/posts/8.-string-to-integer-(atoi)/" />
    <author>
      <name>Ohsu Kwon</name>
    </author>

  
    
    <category term="programming" />
    
    <category term="leetcode" />
    
  

  <summary>url: https://leetcode.com/problems/string-to-integer-atoi/description/

Example



  Input: s = “1337c0d3”
Output: 1337 
Explanation:  
Step 1: “1337c0d3” (no characters read because there is no leading whitespace) 
Step 2: “1337c0d3” (no characters read because there is neither a ‘-‘ nor ‘+’)
Step 3: “1337c0d3” (“1337” is read in; reading stops because the next character is a non-digit)


💻 Co...</summary>

  </entry>

</feed>


